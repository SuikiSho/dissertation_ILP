import numpy as np
from scipy.optimize import linprog
from sherali_adams import Ys, SheraliAdams

def _test1():
    c = np.array([1, 1])
    A_ub = np.array([[1, 1]])
    b_ub = np.array([1.5])
    model = SheraliAdams(c, A_ub, b_ub)

    print("Initial constraints and ys:")
    model.print_status()
    opt_sol, opt_val = model.solve()
    print(f"Optimal solution: {opt_sol}; Optimal objective: {opt_val}")

def _test2():
    c = np.array([1, 1])
    A_ub = np.array([[2, 1]])
    b_ub = np.array([2])
    model = SheraliAdams(c, A_ub, b_ub)

    print("Initial constraints and ys:")
    model.print_status()
    opt_sol, opt_val = model.solve()
    print(f"Optimal solution: {opt_sol}; Optimal objective: {opt_val}")

def _test3():
    c = np.array([2, 1])        # 2x1 + x2
    A_ub = np.array([[1, 0]])   # x1 <= 0.6
    b_ub = np.array([0.6])
    A_eq = np.array([[1, 1]])   # x1 + x2 = 1
    b_eq = np.array([1])
    model = SheraliAdams(c, A_ub, b_ub, A_eq, b_eq)

    print("Initial constraints and ys:")
    model.print_status()
    opt_sol, opt_val = model.solve()
    print(f"Optimal solution: {opt_sol}; Optimal objective: {opt_val}")

def _test4():
    c = np.array([1,2,3,4,5,6,7,8,9,10])

    A_ub = np.array([
        [0,0,0,0,0,0,0,0,1,1],      # x9 + x10 <= 1.5
        [0,1,0,0,1,0,0,1,0,0],      # x2 + x5 + x8 <= 2
        [1,0,0,1,0,0,1,0,0,1],      # x1 + x4 + x7 + x10 <= 4
        [0,0,1,0,0,1,0,0,1,0],      # x3 + x6 + x9 <= 3
        [0,1,0,0,0,1,0,0,0,1],      # x2 + x6 + x10 <= 3
        [3,0,0,0,0,0,0,1,1,1],      # 3x1 + x8 + x9 + x10 <= 3.5
    ])
    b_ub = np.array([1.5, 2, 4, 3, 3, 3.5])

    A_eq = np.array([
        [1,1,1,0,0,0,0,0,0,0],   # x1 + x2 + x3 = 1
        [0,0,0,1,1,0,0,0,0,0],   # x4 + x5 = 1
        [0,0,0,0,0,1,1,1,0,0],   # x6 + x7 + x8 = 2
    ])
    b_eq = np.array([1, 1, 2])

    model = SheraliAdams(c, A_ub, b_ub, A_eq, b_eq)
    model.print_status()

    opt_sol, opt_val = model.solve()
    print(f"Optimal solution: {opt_sol: }; Optimal objective: {opt_val}")

def _test5():
    c = np.array([1]*24)
    A_ub = np.array([[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0],
                    [-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [-1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,1,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,1,0,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [-1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,-1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
                    [-1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,-1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,-1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
                    [1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,1,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,-1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,-1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,1,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,-1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
                    [1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,1,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,-1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,-1,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,-1,1,0,0,1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,0,0,0],
                    [1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,0,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,1,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,1,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,1,0,0,0,-1,0,1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],
                    [-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0],
                    [0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0],
                    [0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0],
                    [0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
                    [0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0],
                    [0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0],
                    [0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0],
                    [0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0],
                    [0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0],
                    [0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,1,0,0],
                    [0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,1,-1,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,1,1,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,1],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,-1],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1,1]
                    ])
    b_ub = np.array([0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1])

    model = SheraliAdams(c, A_ub, b_ub)
    model.print_status()

    opt_sol, opt_val = model.solve()
    print(f"Optimal solution: {opt_sol: }; Optimal objective: {opt_val}")

def _test6():
    A_ub = np.array([[1,0,0,1,0,0],
                    [-1,0,0,0,0,0],
                    [1,-1,0,0,0,0],
                    [-1,1,1,0,0,0],
                    [0,-1,0,1,0,0],
                    [1,0,-1,0,0,0],
                    [0,1,1,-1,0,0],
                    [0,0,-1,1,0,0],
                    [0,0,0,-1,0,0],
                    [-1,0,0,0,-1,0],
                    [0,-1,0,0,1,0],
                    [0,0,-1,0,0,-1],
                    [0,0,0,-1,0,1]])
    b_ub = np.array([0,1,1,1,1,1,1,1,1,-1,0,-1,0])
    num_vars = A_ub.shape[1]
    c = np.array([0]*num_vars)

    model = SheraliAdams(c, A_ub, b_ub)
    model.print_status()

    opt_sol, opt_val = model.solve()
    print(f"Optimal solution: {opt_sol: }; Optimal objective: {opt_val}")

def _test7():
    c = np.array([3., 3., 5., 9., 3.])
    A_ub = np.array([
        [6., 6., 4., 1., 2.],
        [4., 1., 9., 2., 9.],
        [8., 4., 4., 9., 7.]
    ])
    b_ub = np.array([9.5, 12.5, 16.])

    A_eq = None
    b_eq = None

    model = SheraliAdams(c, A_ub, b_ub, A_eq, b_eq)
    model.print_status()

    opt_sol, opt_val = model.solve()
    print(f"Optimal solution: {opt_sol}; Optimal objective: {opt_val}")

if __name__ == "__main__":
    np.set_printoptions(precision=5, suppress=True)

    # _test1()
    # _test2()
    # _test3()
    # _test4()
    # _test5()
    # _test6()
    _test7()